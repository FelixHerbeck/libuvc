apply plugin: 'com.android.library'

import org.apache.tools.ant.taskdefs.condition.Os

android {
	compileSdkVersion = 36
	ndkVersion "29.0.14206865"
	compileOptions {
		sourceCompatibility rootProject.ext.javaSourceCompatibility
		targetCompatibility rootProject.ext.javaTargetCompatibility
	}

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
		targetSdkVersion rootProject.ext.versionTarget
    }


	buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
	lint {
		abortOnError false
		checkReleaseBuilds false
		disable 'MissingTranslation'
	}
	namespace 'com.jiangdg.uvccamera'
}

tasks.withType(JavaCompile).configureEach {
	compileTask -> compileTask.dependsOn ndkBuild
}

String getNdkBuildPath() {
	def ndkBuildingDir = System.getenv("NDK_HOME")
	if (ndkBuildingDir==null || ndkBuildingDir.isEmpty()) {
		Properties properties = new Properties()
		properties.load(project.rootProject.file('local.properties').newDataInputStream())
		ndkBuildingDir = properties.getProperty("ndk.dir")
	}
	def ndkBuildPath = ndkBuildingDir
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
	} else {
		ndkBuildPath = ndkBuildingDir + '/ndk-build'
	}
	return ndkBuildPath
}

tasks.register('ndkBuild', Exec) {
	println('executing ndkBuild')
	def ndkBuildPath = getNdkBuildPath();
	commandLine ndkBuildPath, '-j8', '-C', file('src/main').absolutePath
}

tasks.register('ndkClean', Exec) {
	println('executing ndkBuild clean')
	def ndkBuildPath = getNdkBuildPath();
	commandLine ndkBuildPath, 'clean', '-C', file('src/main').absolutePath
}

clean.dependsOn 'ndkClean'

dependencies {
	implementation fileTree(dir: new File(getLayout().getBuildDirectory().get().asFile, 'libs'), include: '*.jar')
	implementation "androidx.appcompat:appcompat:${androidXVersion}"
	implementation 'com.elvishew:xlog:1.11.0'
//	implementation project(path: ':libuvccommon')
}
